---
layout: post
title:  "OverTheWire: Bandit"
date:   2021-02-13 10:57:56 +0200
categories: overthewire
---

### Level 0 ###
```
ssh bandit0@bandit.labs.overthewire.org -p 2220
```

### Level 0 -> 1 ###
The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.

Solution:
```
bandit0@bandit:~$ ls
readme
bandit0@bandit:~$ cat readme 
```

### Level 1 -> 2 ###
The password for the next level is stored in a file called - located in the home directory

Solution:
```
bandit1@bandit:~$ ls
-
bandit1@bandit:~$ cat ./-
```

### Level 2 -> 3 ###
The password for the next level is stored in a file called spaces in this filename located in the home directory

Solution:
```
bandit2@bandit:~$ ls
spaces in this filename
bandit2@bandit:~$ cat spaces\ in\ this\ filename
```

### Level 3 -> 4 ###
The password for the next level is stored in a hidden file in the inhere directory.

Solution:
```
bandit3@bandit:~$ ls
inhere
bandit3@bandit:~$ ls inhere/
bandit3@bandit:~$ ls -a inhere/
.  ..  .hidden
bandit3@bandit:~$ cat inhere/.hidden 
```

### Level 4 -> 5 ###
The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.

Solution:
```
bandit4@bandit:~$ ls
inhere
bandit4@bandit:~$ ls -lah inhere/
total 48K
drwxr-xr-x 2 root    root    4.0K May  7  2020 .
drwxr-xr-x 3 root    root    4.0K May  7  2020 ..
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file00
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file01
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file02
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file03
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file04
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file05
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file06
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file07
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file08
-rw-r----- 1 bandit5 bandit4   33 May  7  2020 -file09
bandit4@bandit:~$ for i in $(ls inhere); do cat -- inhere/$i | strings; done
```
That for loop iterates through each file inside ```inhere/``` and extracts the strings contained inside. One of the outputted strings must will be our password! We use ```--``` for the ```cat``` command to dodge te ```-``` character inside the names of the files.

### Level 5 -> 6 ###
The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:

    human-readable
    1033 bytes in size
    not executable

Solution:
```
bandit5@bandit:~$ ls
inhere
bandit5@bandit:~$ ls inhere/
maybehere00  maybehere04  maybehere08  maybehere12  maybehere16
maybehere01  maybehere05  maybehere09  maybehere13  maybehere17
maybehere02  maybehere06  maybehere10  maybehere14  maybehere18
maybehere03  maybehere07  maybehere11  maybehere15  maybehere19
bandit5@bandit:~$ find . -size 1033c -readable
./inhere/maybehere07/.file2
bandit5@bandit:~$ cat ./inhere/maybehere07/.file2
```

### Level 6 -> 7 ###
The password for the next level is stored somewhere on the server and has all of the following properties:

    owned by user bandit7
    owned by group bandit6
    33 bytes in size

Solution:
```
bandit6@bandit:~$ find / -user bandit7 -group bandit6 -size 33c 2>/dev/null
/var/lib/dpkg/info/bandit7.password
bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password
```

### Level 7 -> 8 ###
The password for the next level is stored in the file data.txt next to the word millionth

Solution:
```
bandit7@bandit:~$ ls
data.txt
bandit7@bandit:~$ cat data.txt | grep "millionth"
```

### Level 8 -> 9 ###
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once

Solution:
```
bandit8@bandit:~$ ls
data.txt
bandit8@bandit:~$ cat data.txt | sort | uniq -u
```

### Level 9 -> 10 ###
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.

Solution:
```
bandit9@bandit:~$ ls
data.txt
bandit9@bandit:~$ cat data.txt | strings | grep ==
========== the*2i"4
========== password
Z)========== is
```

### Level 10 -> 11 ###
The password for the next level is stored in the file data.txt, which contains base64 encoded data

Solution:
```
bandit10@bandit:~$ ls
data.txt
bandit10@bandit:~$ cat data.txt 
VGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==
bandit10@bandit:~$ cat data.txt | base64 -d
```

### Level 11 -> 12 ###

The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions

It seems that we have to do with the ROT13 algorithm here
Solution:
```
bandit11@bandit:~$ cat data.txt | tr "A-Za-z" "N-ZA-Mn-za-m"
```

### Level 12 -> 13 ###
The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)

First let's create our directory, as indicated:
```
bandit12@bandit:~$ mkdir /tmp/testingdir
bandit12@bandit:~$ cp data.txt /tmp/testingdir/data.txt
bandit12@bandit:~$ cd /tmp/testingdir
bandit12@bandit:/tmp/testingdir$ ls
data.txt
```
Solution:
```
bandit12@bandit:/tmp/testingdir$ file data.txt 
data.txt: ASCII text
bandit12@bandit:/tmp/testingdir$ cat data.txt | xxd -r > data1.xxd
bandit12@bandit:/tmp/testingdir$ file data1.txt 
data1.txt: gzip compressed data, was "data2.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
bandit12@bandit:/tmp/testingdir$ gunzip data1.txt
gzip: data1.txt: unknown suffix -- ignored
bandit12@bandit:/tmp/testingdir$ mv data1.txt data.gz
bandit12@bandit:/tmp/testingdir$ gunzip data.gz
bandit12@bandit:/tmp/testingdir$ ls
data  data.txt
bandit12@bandit:/tmp/testingdir$ file data
data: bzip2 compressed data, block size = 900k
bandit12@bandit:/tmp/testingdir$ bzip2 -d data
bzip2: Can't guess original name for data -- using data.out
bandit12@bandit:/tmp/testingdir$ file data.out
data.out: gzip compressed data, was "data4.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
bandit12@bandit:/tmp/testingdir$ mv data.out data.gz
bandit12@bandit:/tmp/testingdir$ gunzip data.gz
bandit12@bandit:/tmp/testingdir$ file data
data: POSIX tar archive (GNU)
bandit12@bandit:/tmp/testingdir$ tar -xvf data
data5.bin
bandit12@bandit:/tmp/testingdir$ file data5.bin
data5.bin: POSIX tar archive (GNU)
bandit12@bandit:/tmp/testingdir$ tar -xvf data5.bin
data6.bin
bandit12@bandit:/tmp/testingdir$ file data6.bin
data6.bin: bzip2 compressed data, block size = 900k
bandit12@bandit:/tmp/testingdir$ bzip2 -d data6.bin
bzip2: Can't guess original name for data6.bin -- using data6.bin.out
bandit12@bandit:/tmp/testingdir$ file data6.bin.out 
data6.bin.out: POSIX tar archive (GNU)
bandit12@bandit:/tmp/testingdir$ tar -xvf data6.bin.out 
data8.bin
bandit12@bandit:/tmp/testingdir$ file data8.bin
data8.bin: gzip compressed data, was "data9.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
bandit12@bandit:/tmp/testingdir$ mv data8.bin data.gz
bandit12@bandit:/tmp/testingdir$ gunzip data.gz
gzip: data already exists; do you wish to overwrite (y or n)? y
bandit12@bandit:/tmp/testingdir$ file data
data: ASCII text
bandit12@bandit:/tmp/testingdir$ cat data
```

### Level 13 -> 14 ###
The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on

Solution:
```
bandit13@bandit:~$ ls
sshkey.private
bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost
bandit14@bandit:~$ cat  /etc/bandit_pass/bandit14
```

### Level 14 -> 15 ###
The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.

Solution:
```
bandit14@bandit:~$ echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e | nc localhost 30000
```

### Level 15 -> 16 ###
The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.

Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…

Solution:
```
bandit15@bandit:~$ openssl s_client -connect localhost:30001
CONNECTED(00000003)
depth=0 CN = localhost
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = localhost
verify return:1
---
Certificate chain
 0 s:/CN=localhost
   i:/CN=localhost
---
Server certificate
-----BEGIN CERTIFICATE-----
MIICBjCCAW+gAwIBAgIEPksiGTANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDDAls
b2NhbGhvc3QwHhcNMjEwMTAzMTkzODIzWhcNMjIwMTAzMTkzODIzWjAUMRIwEAYD
VQQDDAlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAM2B6gJt
YTxcQPphtWBuM1ge8cuuvdaD4jc0LZ4PMQzqxH3xnw1pRWIJPUXHxoqbC4xxXNLk
6zR0CrLH2AfPraS3gMPy7MtmDoGpNea3XJ/t1jkcxSNPsTfoGjpHhJ686lmQLsO4
CAsLHYupe/dFwHwQYjfmp8M3rpWm8jv3kzK9AgMBAAGjZTBjMBQGA1UdEQQNMAuC
CWxvY2FsaG9zdDBLBglghkgBhvhCAQ0EPhY8QXV0b21hdGljYWxseSBnZW5lcmF0
ZWQgYnkgTmNhdC4gU2VlIGh0dHBzOi8vbm1hcC5vcmcvbmNhdC8uMA0GCSqGSIb3
DQEBBQUAA4GBAFEvYhX6w87jWnKLpx9iSVhI1cBxNS5tzzOT+XzjIiZF5v78QJcp
I7h4z4ncZVOJGazdArF+6/B2uHFT7+QKVmQNbnX/wSAEJM0Mvp9qHOlMYaRvwP34
BRXc6VqbVQ4EbPTU5UcN1Yp7lLJ4DuNYfChFpX0xCTkhIvGWqXkGecyP
-----END CERTIFICATE-----
subject=/CN=localhost
issuer=/CN=localhost
---
No client certificate CA names sent
Peer signing digest: SHA512
Server Temp Key: X25519, 253 bits
---
SSL handshake has read 1019 bytes and written 269 bytes
Verification error: self signed certificate
---
New, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 1024 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: 472197E34BD4E70761B66C8BB77D76C089148663FAE7FD711F030C87CFAEAB34
    Session-ID-ctx: 
    Master-Key: 322DA8FE1DEBB4FD876950DD692C388C4E1A4CA84AD55F2A9B512AC012A3ABB4D5B6295C98FD36711336F0345E7E8B31
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: 7200 (seconds)
    TLS session ticket:
    0000 - a9 48 f8 cd 59 86 5a b6-19 9c 9f f8 42 95 26 f2   .H..Y.Z.....B.&.
    0010 - a0 6a dc e5 be a1 91 c2-e7 32 7f 19 49 5b e2 52   .j.......2..I[.R
    0020 - 78 af 2c 97 1a 69 b0 d8-2d 8e 06 cb 54 9d 8d 91   x.,..i..-...T...
    0030 - 18 1f cc 56 e8 72 76 3f-d1 e7 80 d9 f9 cd 96 09   ...V.rv?........
    0040 - e7 bf 17 0d 4e e5 72 2c-f1 02 00 9e 02 78 f0 0f   ....N.r,.....x..
    0050 - d3 ef 4d 95 49 5b 0f 62-77 c2 b3 b3 0b 0b 70 c3   ..M.I[.bw.....p.
    0060 - fc 7b e9 8d 9f 78 6e 55-d4 05 a4 da fa e1 e8 14   .{...xnU........
    0070 - f9 ce 41 bf f8 29 52 20-64 1f 41 c8 cf cf 9d 15   ..A..)R d.A.....
    0080 - 19 98 cf 27 dd 23 d9 bc-bc bd 81 64 ac b6 4c 8e   ...'.#.....d..L.
    0090 - ab 84 cd e7 d5 85 75 ba-8a 8b ea fe 50 c3 83 b5   ......u.....P...

    Start Time: 1613213088
    Timeout   : 7200 (sec)
    Verify return code: 18 (self signed certificate)
    Extended master secret: yes
---
BfMYroe26WYalil77FoDi9qh59eK5xNr
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

closed
```

### Level 16 -> 17 ###
The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.

Solution:
```
bandit16@bandit:~$ nmap -p31000-32000 localhost -T5

Starting Nmap 7.40 ( https://nmap.org ) at 2021-02-13 11:48 CET
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00026s latency).
Not shown: 996 closed ports
PORT      STATE SERVICE
31046/tcp open  unknown
31518/tcp open  unknown
31691/tcp open  unknown
31790/tcp open  unknown
31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.09 seconds
```
After trying to connect using ```SSL``` to each port, the one that will give us the private key is ```31790```:
```
bandit16@bandit:~$ openssl s_client -connect localhost:31790
```
Going back to our machine we copy the obtained key and connect to the next level:
```
echo "-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----
" > key; chmod 600 key
vultur@Nest:~$ ssh -i key bandit17@bandit.labs.overthewire.org -p 2220
```

### Level 17 -> 18 ###
There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new

NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19

Solution:
```
bandit17@bandit:~$ diff passwords.old passwords.new --suppress-common-lines
```

### Level 18 -> 19 ###
The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.

Solution:
```
vultur@Nest:~$ ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme
```

### Level 19 -> 20 ###
To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.

Solution:
```
bandit19@bandit:~$ ./bandit20-do cat /etc/bandit_pass/bandit20
```

### Level 20 -> 21 ###
There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).

Solution:
```
bandit20@bandit:~$ ./suconnect 6969
```
And in another terminal listen on that port and submit the previous password:
```
bandit20@bandit:~$ nc -lvnp 6969
listening on [any] 6969 ...
connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 43868
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
```

### Level 21 -> 22 ###
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

Solution:
```
bandit21@bandit:~$ ls /etc/cron.d
cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24
cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root
bandit21@bandit:~$ cat /etc/cron.d/cronjob_bandit22
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
bandit21@bandit:~$ cat /usr/bin/cronjob_bandit22.sh
#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
bandit21@bandit:~$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
```

### Level 22 -> 23 ###
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.

Solution:
```
bandit22@bandit:~$ ls /etc/cron.d
cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24
cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root
bandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23
@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
bandit22@bandit:~$ cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"

cat /etc/bandit_pass/$myname > /tmp/$mytarget
bandit22@bandit:~$ echo I am user bandit23 | md5sum | cut -d ' ' -f 1
8ca319486bfbbc3663ea0fbe81326349
bandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349
```

### Level 23 -> 24 ###
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.

NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!

NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…

Solution:
```
bandit23@bandit:~$ ls /etc/cron.d
cronjob_bandit15_root  cronjob_bandit22  cronjob_bandit24
cronjob_bandit17_root  cronjob_bandit23  cronjob_bandit25_root
bandit23@bandit:~$ cat /etc/cron.d/cronjob_bandit24
@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
bandit23@bandit:~$ cat /usr/bin/cronjob_bandit24.sh
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname
echo "Executing and deleting all scripts in /var/spool/$myname:"
for i in * .*;
do
    if [ "$i" != "." -a "$i" != ".." ];
    then
        echo "Handling $i"
        owner="$(stat --format "%U" ./$i)"
        if [ "${owner}" = "bandit23" ]; then
            timeout -s 9 60 ./$i
        fi
        rm -f ./$i
    fi
done
```
We can see that all scrips inside that directory are first executed and then deleted, so let's create our own that would give us the flag:
```
bandit23@bandit:/$ vim /var/spool/bandit24/script.sh
```
```
#!/bin/bash                                                        
cat /etc/bandit_pass/bandit24 > /tmp/flag.txt
chmod 777 /tmp/flag.txt
```
After a while, we can get our flag:
```
bandit23@bandit:/$ cat /tmp/flag.txt
```

### Level 24 -> 25 ###
A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.

Solution:
```
bandit24@bandit:~$ for i in {0001..9999}; do echo "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $i"; done  | nc localhost 30002
```

### Level 25 -> 26 ###
Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.

Solution:
```
bandit25@bandit:~$ ls -la
total 32
drwxr-xr-x  2 root     root     4096 May 14  2020 .
drwxr-xr-x 41 root     root     4096 May  7  2020 ..
-rw-r-----  1 bandit25 bandit25   33 May 14  2020 .bandit24.password
-r--------  1 bandit25 bandit25 1679 May  7  2020 bandit26.sshkey
-rw-r--r--  1 root     root      220 May 15  2017 .bash_logout
-rw-r--r--  1 root     root     3526 May 15  2017 .bashrc
-rw-r-----  1 bandit25 bandit25    4 May 14  2020 .pin
-rw-r--r--  1 root     root      675 May 15  2017 .profile
bandit25@bandit:~$ cat /etc/passwd | grep bandit26
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
bandit25@bandit:~$ cat /usr/bin/showtext
#!/bin/sh

export TERM=linux

more ~/text.txt
exit 0
```
Due to that ```exit 0``` we are sure to be kicked out everytime we would try to get to ```bandit26```, but, using [GTFOBins'](https://gtfobins.github.io/gtfobins/more/) suggestion, if we reduce the terminal size to very small sizes and press ```v``` we will drop into our default editor, where we could spawn our shell:
```
:set shell=/bin/bash
:shell
```
And we get to the next level:
```
bandit26@bandit:~$ whoami
bandit26
```

### Level 26 -> 27 ###
Good job getting a shell! Now hurry and grab the password for bandit27!

Solution:
```
bandit26@bandit:~$ ls
bandit27-do  text.txt
bandit26@bandit:~$ ./bandit27-do 
Run a command as another user.
  Example: ./bandit27-do id
bandit26@bandit:~$ ./bandit27-do cat /etc/bandit_pass/bandit27
```

### Level 27 -> 28 ###
There is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo. The password for the user bandit27-git is the same as for the user bandit27.

Solution:
```
bandit27@bandit:~$ cd /tmp
bandit27@bandit:/tmp$ mkdir b27; cd b27
bandit27@bandit:/tmp/b27$ git clone ssh://bandit27-git@localhost/home/bandit27-git/repo
bandit27@bandit:/tmp/b27$ ls
repo
bandit27@bandit:/tmp/b27$ cd repo
bandit27@bandit:/tmp/b27/repo$ ls
README
bandit27@bandit:/tmp/b27/repo$ cat README 
```

### Level 28 ->  29 ###
There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. The password for the user bandit28-git is the same as for the user bandit28.

Solution:
```
bandit28@bandit:~$ mkdir /tmp/b28; cd /tmp/b28
bandit28@bandit:/tmp/b28$ git clone ssh://bandit28-git@localhost/home/bandit28-git/repo
bandit28@bandit:/tmp/b28$ ls
repo
bandit28@bandit:/tmp/b28$ cd repo
bandit28@bandit:/tmp/b28/repo$ ls
README.md
bandit28@bandit:/tmp/b28/repo$ cat README.md 
# Bandit Notes
Some notes for level29 of bandit.

## credentials

- username: bandit29
- password: xxxxxxxxxx

bandit28@bandit:/tmp/b28/repo$ git log
commit edd935d60906b33f0619605abd1689808ccdd5ee
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    fix info leak

commit c086d11a00c0648d095d04c089786efef5e01264
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    add missing data

commit de2ebe2d5fd1598cd547f4d56247e053be3fdc38
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    initial commit of README.md
```
The git log reveals a credential leak at the second commit:
```
bandit28@bandit:/tmp/b28/repo$ git show c086d11a00c0648d095d04c089786efef5e01264
```

### Level 29 -> 30 ###
There is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo. The password for the user bandit29-git is the same as for the user bandit29.

Solution:
```
bandit29@bandit:~$ mkdir /tmp/b29; cd /tmp/b29
bandit29@bandit:/tmp/b29$ git clone ssh://bandit29-git@localhost/home/bandit29-git/repo
bandit29@bandit:/tmp/b29$ ls
repo
bandit29@bandit:/tmp/b29$ cd repo
bandit29@bandit:/tmp/b29/repo$ ls
README.md
bandit29@bandit:/tmp/b29/repo$ cat README.md 
# Bandit Notes
Some notes for bandit30 of bandit.

## credentials

- username: bandit30
- password: <no passwords in production!>

bandit29@bandit:/tmp/b29/repo$ git log
commit 208f463b5b3992906eabf23c562eda3277fea912
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    fix username

commit 18a6fd6d5ef7f0874bbdda2fa0d77b3b81fd63f7
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    initial commit of README.md
bandit29@bandit:/tmp/b29/repo$ git show 18a6fd6d5ef7f0874bbdda2fa0d77b3b81fd63f7
commit 18a6fd6d5ef7f0874bbdda2fa0d77b3b81fd63f7
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    initial commit of README.md

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..2da2f39
--- /dev/null
+++ b/README.md
@@ -0,0 +1,8 @@
+# Bandit Notes
+Some notes for bandit30 of bandit.
+
+## credentials
+
+- username: bandit29
+- password: <no passwords in production!>
+
bandit29@bandit:/tmp/b29/repo$ git show 208f463b5b3992906eabf23c562eda3277fea912
commit 208f463b5b3992906eabf23c562eda3277fea912
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    fix username

diff --git a/README.md b/README.md
index 2da2f39..1af21d3 100644
--- a/README.md
+++ b/README.md
@@ -3,6 +3,6 @@ Some notes for bandit30 of bandit.
 
 ## credentials
 
-- username: bandit29
+- username: bandit30
 - password: <no passwords in production!>
 ```
 We can see there is nothing here... maybe in another branch?
 ```
 bandit29@bandit:/tmp/b29/repo$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/dev
  remotes/origin/master
  remotes/origin/sploits-dev
bandit29@bandit:/tmp/b29/repo$ git checkout dev
Branch dev set up to track remote branch dev from origin.
Switched to a new branch 'dev'
bandit29@bandit:/tmp/b29/repo$ ls
code  README.md
bandit29@bandit:/tmp/b29/repo$ cat README.md 
```
And here is our password!

### Level 30 -> 31 ###
There is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo. The password for the user bandit30-git is the same as for the user bandit30.

Solution:
```
bandit30@bandit:~$ mkdir /tmp/b30; cd /tmp/b30
bandit30@bandit:/tmp/b30$ git clone ssh://bandit30-git@localhost/home/bandit30-git/repo
bandit30@bandit:/tmp/b30$ ls
repo
bandit30@bandit:/tmp/b30$ cd repo
bandit30@bandit:/tmp/b30/repo$ ls
README.md
bandit30@bandit:/tmp/b30/repo$ cat README.md 
just an epmty file... muahaha
bandit30@bandit:/tmp/b30/repo$ git log
commit 3aefa229469b7ba1cc08203e5d8fa299354c496b
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:54 2020 +0200

    initial commit of README.md
bandit30@bandit:/tmp/b30/repo$ git branch -r
  origin/HEAD -> origin/master
  origin/master
bandit30@bandit:/tmp/b30/repo$ cd .git
bandit30@bandit:/tmp/b30/repo/.git$ ls -la
total 52
drwxr-sr-x 8 bandit30 root 4096 Feb 13 17:09 .
drwxr-sr-x 3 bandit30 root 4096 Feb 13 17:09 ..
drwxr-sr-x 2 bandit30 root 4096 Feb 13 17:08 branches
-rw-r--r-- 1 bandit30 root  276 Feb 13 17:09 config
-rw-r--r-- 1 bandit30 root   73 Feb 13 17:08 description
-rw-r--r-- 1 bandit30 root   23 Feb 13 17:09 HEAD
drwxr-sr-x 2 bandit30 root 4096 Feb 13 17:08 hooks
-rw-r--r-- 1 bandit30 root  137 Feb 13 17:09 index
drwxr-sr-x 2 bandit30 root 4096 Feb 13 17:08 info
drwxr-sr-x 3 bandit30 root 4096 Feb 13 17:09 logs
drwxr-sr-x 4 bandit30 root 4096 Feb 13 17:08 objects
-rw-r--r-- 1 bandit30 root  165 Feb 13 17:09 packed-refs
drwxr-sr-x 5 bandit30 root 4096 Feb 13 17:09 refs
bandit30@bandit:/tmp/b30/repo/.git$ cat packed-refs 
# pack-refs with: peeled fully-peeled 
3aefa229469b7ba1cc08203e5d8fa299354c496b refs/remotes/origin/master
f17132340e8ee6c159e0a4a6bc6f80e1da3b1aea refs/tags/secret
```
So our secret is part of a tag
```
bandit30@bandit:/tmp/b30/repo/.git$ git tag
secret
bandit30@bandit:/tmp/b30/repo/.git$ git show tags/secret
```

### Level 31 -> 32 ###
There is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo. The password for the user bandit31-git is the same as for the user bandit31.

Solution:
```
bandit31@bandit:~$ mkdir /tmp/b31; cd /tmp/b31
bandit31@bandit:/tmp/b31$ git clone ssh://bandit31-git@localhost/home/bandit31-git/repo
bandit31@bandit:/tmp/b31$ ls
repo
bandit31@bandit:/tmp/b31$ cd repo
bandit31@bandit:/tmp/b31/repo$ ls
README.md
bandit31@bandit:/tmp/b31/repo$ cat README.md 
This time your task is to push a file to the remote repository.

Details:
    File name: key.txt
    Content: 'May I come in?'
    Branch: master
bandit31@bandit:/tmp/b31/repo$ echo "May I come in?" > key.txt
bandit31@bandit:/tmp/b31/repo$ git add key.txt -f
bandit31@bandit:/tmp/b31/repo$ git commit -m "Noice"
[master 5dfa059] Noice
 1 file changed, 1 insertion(+)
 create mode 100644 key.txt
bandit31@bandit:/tmp/b31/repo$ git push
```
Pushing to the remote repository doesn't actually work obviously, but at least it outputs the flag to us

### Level 32 -> 33 ###
After all this git stuff its time for another escape. Good luck!

Looks like this level is going to be very interesting:
```
WELCOME TO THE UPPERCASE SHELL
>> 
```

Solution:
```
>> $0 
$ cat /etc/bandit_pass/bandit33
```

```$0``` represent the name of the binary itself that is being executed to read commands from ```stdin```.

### Level 33 -> 34 ###
At this moment, level 34 does not exist yet.

```All right, guess we're done here :)```